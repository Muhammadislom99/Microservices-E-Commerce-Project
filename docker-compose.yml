services:
  # --- SQL Server instances ---
  sqlserver-users:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver-users
    environment:
      SA_PASSWORD: "YourStrong@Passw0rd"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - users_data:/var/opt/mssql
    networks:
      - microservices-network

  sqlserver-products:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver-products
    environment:
      SA_PASSWORD: "YourStrong@Passw0rd"
      ACCEPT_EULA: "Y"
    ports:
      - "1434:1433"
    volumes:
      - products_data:/var/opt/mssql
    networks:
      - microservices-network

  sqlserver-orders:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver-orders
    environment:
      SA_PASSWORD: "YourStrong@Passw0rd"
      ACCEPT_EULA: "Y"
    ports:
      - "1435:1433"
    volumes:
      - orders_data:/var/opt/mssql
    networks:
      - microservices-network
  
  # --- Microservices ---
  user-service:
    build:
      context: .
      dockerfile: UserService/Dockerfile
    container_name: user-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver-users;Database=UserDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;
      - OTEL_DOTNET_EXPERIMENTAL_METRICS_EXEMPLAR_FILTER=always_on
    ports:
      - "5001:80"
    depends_on:
      sqlserver-users:
        condition: service_healthy
    networks:
      - microservices-network
    restart: on-failure

  product-service:
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    container_name: product-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver-products;Database=ProductDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;
      - OTEL_DOTNET_EXPERIMENTAL_METRICS_EXEMPLAR_FILTER=always_on
    ports:
      - "5002:80"
    depends_on:
      sqlserver-products:
        condition: service_healthy
    networks:
      - microservices-network
    restart: on-failure

  order-service:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    container_name: order-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver-orders;Database=OrderDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;
      - Services__UserService=http://user-service:80
      - Services__ProductService=http://product-service:80
      - OTEL_DOTNET_EXPERIMENTAL_METRICS_EXEMPLAR_FILTER=always_on
    ports:
      - "5003:80"
    depends_on:
      sqlserver-orders:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - microservices-network
    restart: on-failure

  api-gateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    container_name: api-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Services__UserService=http://user-service:80
      - Services__ProductService=http://product-service:80
      - Services__OrderService=http://order-service:80
      - OTEL_DOTNET_EXPERIMENTAL_METRICS_EXEMPLAR_FILTER=always_on
    ports:
      - "5000:80"
    depends_on:
      - user-service
      - product-service
      - order-service
    networks:
      - microservices-network
    restart: on-failure
  
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - microservices-network
    restart: on-failure

  # --- OBSERVABILITY STACK ---
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel/config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus exporter
    networks:
      - microservices-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC для otel-collector
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"   # Prometheus UI
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"   # Grafana UI
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards   
    networks:
      - microservices-network

volumes:
  users_data:
  products_data:
  orders_data:

networks:
  microservices-network:
    driver: bridge